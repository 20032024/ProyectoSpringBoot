name: Deploy-postgresql-api

on:
  push:
    branches: ["master"]

jobs:
  deploy-api:
    runs-on: ubuntu-latest
    steps:
      
      # Paso 1: Checkout del código
      - name: Checkout code
        uses: actions/checkout@v2

      # Paso 2: Crear el archivo .env con las variables de entorno
      - name: Create .env file with DB connection info
        run: |
          touch .env
          echo "SPRING_DATASOURCE_URL=${{ secrets.DB_URL }}" >> .env
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          cat .env

      # Paso 3: Construir la imagen Docker usando el Dockerfile
      - name: Build Docker image
        run: |
          docker build --build-arg SPRING_DATASOURCE_URL=${{ secrets.DB_URL }} \
                       --build-arg SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
                       --build-arg SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
                       --build-arg JWT_SECRET=${{ secrets.JWT_SECRET }} \
                       -f Dockerfile .  # Asegúrate de que la ruta al Dockerfile esté correcta

      # Paso 4: Iniciar sesión en Docker Hub
      - name: Docker login
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
        
      # Paso 5: Subir la imagen a Docker Hub
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USER }}/springboot-api:${{ github.sha }}
